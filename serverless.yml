service: serverlessguru
# org: riverwalkdevelopers
# app: serverlessguru-test

plugins:
  - serverless-pseudo-parameters
  - serverless-plugin-additional-stacks
  - serverless-iam-roles-per-function
  - serverless-plugin-include-dependencies
  - serverless-appsync-plugin

provider:
  name: aws
  runtime: nodejs12.x
  profile: rwdvs
  region: ${file(./env.yml):${'${self:provider.stage}.REGION'}}
  timeout: 120
  stackName: ${self:service}
  stage: ${opt:stage, 'dev'}

custom:
  base: ${self:service}-${self:provider.stage}

  dynamoDBTableName: ${self:custom.base}-employees

  role:
    arn: ${file(./env.yml):${'${self:provider.stage}.ARN_IAM'}}
    cognito:
      auth:
        name: ${self:custom.base}-auth-CognitoRole
        arn: { Fn::GetAtt: [CognitoAuthRole, Arn] }
      unAuth:
        name: ${self:custom.base}-unAuth-CognitoRole
        arn: { Fn::GetAtt: [CognitoUnauthRole, Arn] }
    dynamodb:
      name: ${self:custom.base}-DynamoDB-AppSyncServiceRole
      arn: ${self:custom.role.arn}/${self:custom.role.dynamodb.name}
    lambda:
      name: ${self:custom.base}-Lambda-AppSyncServiceRole
      arn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
    logging:
      name: ${self:custom.base}-Logging-AppSyncServiceRole
      arn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] }

  additionalStacks:
    cognitoResources:
      Deploy: Before
      StackName: ${self:custom.base}-cognito
      Resources: ${file(./resources/cognito.yml)}
      Outputs: ${file(./resources/cognito-outputs.yml)}
    dynamoDBResources:
      Deploy: Before
      StackName: ${self:custom.base}-dynamodb
      Resources: ${file(./resources/dynamodb.yml)}

  appSync:
    name: ${self:custom.base}-api
    authenticationType: AWS_IAM
    logConfig:
      loggingRoleArn: ${self:custom.role.logging.arn}
      level: ALL
    mappingTemplates:
      - dataSource: LambdaDataSource
        type: Query
        field: helloWorld
        request: "request/lambda-invoke.vtl"
        response: "response/generic.vtl"
      - dataSource: EmployeesDataSource
        type: Mutation
        field: createEmployee
        request: "request/db-employees-create-item.vtl"
        response: "response/generic.vtl"
      - dataSource: EmployeesDataSource
        type: Mutation
        field: deleteEmployee
        request: "request/db-employees-delete-item.vtl"
        response: "response/generic.vtl"
      - dataSource: EmployeesDataSource
        type: Mutation
        field: updateEmployee
        request: "request/db-employees-update-item.vtl"
        response: "response/generic.vtl"
      - dataSource: EmployeesDataSource
        type: Query
        field: batchGetEmployees
        request: "request/db-employees-batch-get-${self:provider.stage}.vtl"
        response: "response/db-employees-batch-get-${self:provider.stage}.vtl"
      - dataSource: EmployeesDataSource
        type: Query
        field: getEmployee
        request: "request/db-employees-get-item.vtl"
        response: "response/generic.vtl"
    mappingTemplatesLocation: "mapping-templates"
    serviceRole: "AppSyncServiceRole"
    dataSources:
      - type: AWS_LAMBDA
        name: LambdaDataSource
        description: 'Lambda DataSource'
        config:
          functionName: graphql
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: EmployeesDataSource
        description: 'Employees DataSource'
        config:
          tableName: ${self:custom.dynamoDBTableName}
          serviceRoleArn: ${self:custom.role.dynamodb.arn}

functions:
  graphql:
    handler: handler.graphql

resources:
  - ${file(resources/logging.yml)}
  - ${file(resources/lambda.yml)}
